document.addEventListener('DOMContentLoaded', () => {
    const BACKEND_URL = "https://alarma-production.up.railway.app";

    console.log("‚úÖ Script cargado. Backend URL:", BACKEND_URL);

    const urlParams = new URLSearchParams(window.location.search);
    const comunidadSeleccionada = urlParams.get('comunidad');

    if (!comunidadSeleccionada) {
        alert("‚ùå No se especific√≥ la comunidad en la URL.");
        return;
    }
    console.log("‚úÖ Comunidad seleccionada:", comunidadSeleccionada);

    let userData = null;
    let comunidadMiembros = [];
    let currentUserMemberData = null;

    const textarea = document.getElementById('descripcion');
    const boton = document.getElementById('btnEmergencia');
    const statusMsg = document.getElementById('statusMsg');
    const toggleRealTime = document.getElementById('toggleRealTime');

    const userIdFromUrl = urlParams.get('id');
    const userFirstNameFromUrl = urlParams.get('first_name');

    if (userIdFromUrl) {
        userData = {
            id: userIdFromUrl,
            first_name: userFirstNameFromUrl,
            last_name: urlParams.get('last_name') || '',
            username: urlParams.get('username') || ''
        };
        console.log("‚úÖ Datos del usuario obtenidos de la URL:", userData);
        statusMsg.textContent = `üëã Hola ${userData.first_name} en ${comunidadSeleccionada.toUpperCase()}`;
    } else if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
        userData = window.Telegram.WebApp.initDataUnsafe.user;
        console.log("‚úÖ Datos del usuario de Telegram cargados:", userData);
        if (userData && userData.first_name) {
            statusMsg.textContent = `üëã Hola ${userData.first_name} en ${comunidadSeleccionada.toUpperCase()}`;
        } else {
            statusMsg.textContent = `üë• Comunidad detectada: ${comunidadSeleccionada.toUpperCase()}`;
        }
    } else {
        console.warn("‚ö†Ô∏è No se pudieron obtener los datos del usuario.");
        statusMsg.textContent = `üë• Comunidad detectada: ${comunidadSeleccionada.toUpperCase()}`;
    }

    cargarDatosComunidad(comunidadSeleccionada);

    async function cargarDatosComunidad(comunidad) {
        try {
            const res = await fetch(`${BACKEND_URL}/api/comunidad/${comunidad}`);
            if (!res.ok) throw new Error(`Error al cargar datos de la comunidad: ${res.status}`);
            const comunidadData = await res.json();
            
            comunidadMiembros = comunidadData.miembros || [];
            console.log("‚úÖ Miembros de la comunidad cargados:", comunidadMiembros);

            if (userData && userData.id) {
                currentUserMemberData = comunidadMiembros.find(m => String(m.telegram_id) === String(userData.id));
                if (currentUserMemberData) {
                    console.log("‚úÖ Datos registrados del usuario actual encontrados:", currentUserMemberData);
                } else {
                    console.warn("‚ö†Ô∏è Usuario actual no encontrado en la lista de miembros de la comunidad.");
                }
            }
        } catch (error) {
            console.error("‚ùå Error en cargarDatosComunidad:", error.message);
            statusMsg.textContent = "‚ùå No se pudieron cargar los datos de la comunidad.";
            boton.disabled = true;
            boton.classList.remove('enabled');
            return;
        }
        updateStatusMessageBasedOnToggle();
    }

    function updateStatusMessageBasedOnToggle() {
        if (toggleRealTime.checked) {
            statusMsg.textContent = "üìç Usando ubicaci√≥n en tiempo real";
        } else if (currentUserMemberData && currentUserMemberData.direccion) {
            statusMsg.textContent = `üìç Tu direcci√≥n registrada: ${currentUserMemberData.direccion}`;
        } else {
            statusMsg.textContent = "‚ö†Ô∏è Ubicaci√≥n no disponible. Por favor, activa GPS.";
        }
    }

    textarea.addEventListener('input', () => {
        const texto = textarea.value.trim();
        if (texto.length >= 4 && texto.length <= 300) {
            boton.disabled = false;
            boton.classList.add('enabled');
            statusMsg.textContent = "‚úÖ Listo para enviar";
            updateStatusMessageBasedOnToggle();
        } else {
            boton.disabled = true;
            boton.classList.remove('enabled');
            statusMsg.textContent = "‚è≥ Esperando acci√≥n del usuario...";
            updateStatusMessageBasedOnToggle();
        }
    });

    toggleRealTime.addEventListener('change', () => {
        updateStatusMessageBasedOnToggle();
    });

    boton.addEventListener('click', () => {
        console.log("‚û°Ô∏è Evento 'click' en el bot√≥n detectado.");
        const descripcion = textarea.value.trim();

        if (!descripcion || !comunidadSeleccionada) {
            console.error("‚ùå Validaci√≥n fallida: faltan datos necesarios (descripci√≥n o comunidad).");
            alert("‚ùå Faltan datos necesarios");
            return;
        }
        
        // CORREGIDO: SE ELIMIN√ì LA VALIDACI√ìN DE currentUserMemberData
        // Ahora se intenta obtener la ubicaci√≥n de cualquier forma, sin importar si el usuario est√° en el JSON.

        boton.disabled = true;
        boton.textContent = "Enviando...";
        statusMsg.textContent = "üîÑ Enviando alerta...";

        let latEnvio = null;
        let lonEnvio = null;
        let direccionEnvio = "Direcci√≥n no disponible";

        if (currentUserMemberData && currentUserMemberData.direccion) {
            direccionEnvio = currentUserMemberData.direccion;
        }

        if (toggleRealTime.checked && navigator.geolocation) {
            console.log("‚û°Ô∏è Solicitando ubicaci√≥n en tiempo real...");
            navigator.geolocation.getCurrentPosition(pos => {
                latEnvio = pos.coords.latitude;
                lonEnvio = pos.coords.longitude;
                console.log("‚úÖ Ubicaci√≥n obtenida (tiempo real). Llamando a enviarAlerta.");
                enviarAlerta(descripcion, latEnvio, lonEnvio, direccionEnvio, userData);
            }, () => {
                console.error("‚ùå Error al obtener ubicaci√≥n en tiempo real. Cayendo a ubicaci√≥n registrada si existe.");
                alert("‚ùå No se pudo obtener ubicaci√≥n en tiempo real. Usando tu ubicaci√≥n registrada.");
                handleFallbackLocation(descripcion, userData, direccionEnvio);
            });
        } else {
            handleFallbackLocation(descripcion, userData, direccionEnvio);
        }
    });

    function handleFallbackLocation(descripcion, userData, direccionFija) {
        let latEnvio = null;
        let lonEnvio = null;
        let direccionEnvio = direccionFija;

        if (currentUserMemberData && currentUserMemberData.geolocalizacion) {
            latEnvio = currentUserMemberData.geolocalizacion.lat;
            lonEnvio = currentUserMemberData.geolocalizacion.lon;
            direccionEnvio = currentUserMemberData.geolocalizacion.direccion || direccionFija;
            console.log("‚û°Ô∏è Fallback: Usando ubicaci√≥n registrada del miembro.");
            enviarAlerta(descripcion, latEnvio, lonEnvio, direccionEnvio, userData);
        } else {
            console.error("‚ùå Fallback: No se encontr√≥ ubicaci√≥n v√°lida (ni registrada ni en tiempo real).");
            // Se env√≠a la alarma con la ubicaci√≥n disponible, incluso si es nula
            enviarAlerta(descripcion, latEnvio, lonEnvio, direccionEnvio, userData);
        }
    }

    function enviarAlerta(descripcion, lat, lon, direccion, userData) {
        console.log("‚û°Ô∏è ENVIAR ALERTA: La funci√≥n ha sido llamada.");
        
        const userTelegramData = userData ? {
            id: userData.id,
            first_name: userData.first_name,
            last_name: userData.last_name || '',
            username: userData.username || ''
        } : {
            id: 'Desconocido',
            first_name: 'An√≥nimo',
            last_name: '',
            username: ''
        };

        console.log("üì§ Datos de usuario a enviar:", userTelegramData);
        console.log("üì§ Datos de ubicaci√≥n a enviar:", { lat, lon, direccion });

        fetch(`${BACKEND_URL}/api/alert`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                tipo: "Alerta Roja Activada",
                descripcion,
                ubicacion: { lat, lon },
                direccion: direccion,
                comunidad: comunidadSeleccionada,
                user_telegram: userTelegramData
            })
        })
            .then(res => {
                console.log("‚úÖ Respuesta del servidor recibida (Headers):", res.status);
                if (!res.ok) {
                    throw new Error(`Error del servidor: ${res.status} ${res.statusText}`);
                }
                return res.json();
            })
            .then(data => {
                console.log("‚úÖ Respuesta del servidor (JSON):", data);
                alert(data.status || "‚úÖ Alerta enviada correctamente.");
                resetFormulario();
            })
            .catch(err => {
                console.error("‚ùå Error en la llamada fetch:", err);
                alert("‚ùå Error al enviar alerta. Consulta la consola para m√°s detalles.");
                resetFormulario();
            });
    }

    function resetFormulario() {
        boton.disabled = true;
        boton.textContent = "üö® Enviar Alerta Roja";
        textarea.value = "";
        boton.classList.remove('enabled');
        updateStatusMessageBasedOnToggle();
    }
});
